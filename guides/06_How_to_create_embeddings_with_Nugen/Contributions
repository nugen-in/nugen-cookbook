


This Pull Request (PR) introduces **security best practices, bug fixes, and resilience improvements** to the Nugen embedding pipeline notebook. It enhances **security, error handling, API reliability, and debugging experience** without altering the core logic or function signatures.

---

### What Was Before

| **Aspect**            | **Previous State**                                              |
|-----------------------|-----------------------------------------------------------------|
| API Key Handling      | Hardcoded (`api_key = "<enter your api key>"`)                  |
| Input Validation      | No checks on type/structure of input `texts`                   |
| URL Scheme            | No enforcement of HTTPS                                        |
| Logging               | Unmasked logs with sensitive token leaks                       |
| Error Handling        | Basic status code checks; lacked exception handling            |
| Timeout Management    | No request timeout; potential for indefinite hangs             |
| Debugging Insight     | No cost/timing tracking; logged payloads as full content       |

---

### Whatâ€™s New (Now)

| **Aspect**            | **Improvement**                                                |
|-----------------------|----------------------------------------------------------------|
| API Key Handling      | Uses `os.getenv("NUGEN_API_KEY")` for secure key management    |
| Input Validation      | Validates `texts` as a list of strings before sending requests |
| HTTPS Only            | Enforces HTTPS for secure transport                            |
| Secure Logging        | Masks `Authorization` token; logs SHA-256 payload hash         |
| Robust Error Handling | Implements `try-except` block with timeout (`timeout=10`)      |
| Cost Awareness        | Tracks execution time for each API call to monitor performance |

---

### Why It Matters

- **Security**: Protects sensitive credentials and ensures secure communication.
- **Stability**: Avoids indefinite wait times with timeout enforcement, handles edge cases gracefully.
- **Developer Experience**: Provides better error visibility and debugging tools without exposing sensitive data.
- **Performance Tracking**: Helps monitor API latency for optimization and cost-effectiveness.

---

### Security & Stability Enhanced (summary)

- **Environment Variable Usage**: API key managed securely via environment variables, avoiding hardcoding.
- **HTTPS Enforcement**: Ensures all API calls use secure communication, blocking insecure URLs.
- **Input Validation**: Verifies `texts` argument for type and structure before processing.
- **Timeout & Exception Handling**: Implements request timeout and robust error handling to prevent indefinite hangs and failures.
- **Secure Logging**: Masks sensitive tokens in logs and uses payload hashing for debugging without data leakage.
